!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
add_task	todo.c	/^int add_task(char* filename, char* string){$/;"	f	signature:(char* filename, char* string)
complete_task	todo.c	/^void complete_task(char* filename, int number)$/;"	f	signature:(char* filename, int number)
destroy_element	linkedlist.c	/^LList* destroy_element(struct element* target){$/;"	f	signature:(struct element* target)
destroy_llist	linkedlist.c	/^int destroy_llist(LList* list)$/;"	f	signature:(LList* list)
get_priority	task.c	/^char get_priority(Task* task){$/;"	f	signature:(Task* task)
list_tasks	todo.c	/^int list_tasks(char* filename){$/;"	f	signature:(char* filename)
list_tasks_matching	todo.c	/^void list_tasks_matching(char* filename, char* string){$/;"	f	signature:(char* filename, char* string)
lladd	linkedlist.c	/^int lladd(LList* l, void* item)$/;"	f	signature:(LList* l, void* item)
llapply	linkedlist.c	/^int llapply(LList* list, void (*function)(void*)){$/;"	f	signature:(LList* list, void (*function)(void*))
llfilter	linkedlist.c	/^LList* llfilter(LList* list, bool (*fun)(void*)){$/;"	f	signature:(LList* list, bool (*fun)(void*))
llget	linkedlist.c	/^void* llget(LList* l, int index){$/;"	f	signature:(LList* l, int index)
llmap	linkedlist.c	/^LList* llmap(LList* list, void* (*function)(void*)){$/;"	f	signature:(LList* list, void* (*function)(void*))
llrem	linkedlist.c	/^void* llrem(LList* l, int index){$/;"	f	signature:(LList* l, int index)
main	todo.c	/^int main(int argc, char* argv[]){$/;"	f	signature:(int argc, char* argv[])
new_llist	linkedlist.c	/^LList* new_llist(){$/;"	f
print_help	todo.c	/^void print_help(){$/;"	f
print_short_help	todo.c	/^void print_short_help(){ $/;"	f
print_version	todo.c	/^void print_version(){$/;"	f
remove_task	todo.c	/^int remove_task(char* filename, int number){$/;"	f	signature:(char* filename, int number)
slide	linkedlist.c	/^struct element* slide(struct element* sl, int howmuch){$/;"	f	signature:(struct element* sl, int howmuch)
strings_equal	todo.c	/^bool strings_equal(char* subject, char* first, char* sec){$/;"	f	signature:(char* subject, char* first, char* sec)
task_append	task.c	/^int task_append(Task* t, char* string){$/;"	f	signature:(Task* t, char* string)
task_complete	task.c	/^void task_complete(Task* task){$/;"	f	signature:(Task* task)
task_dump	task.c	/^char* task_dump(Task* t){$/;"	f	signature:(Task* t)
task_free	task.c	/^void task_free(Task* task){$/;"	f	signature:(Task* task)
task_has_keyword	task.c	/^bool task_has_keyword(Task* t, char* keyword){$/;"	f	signature:(Task* t, char* keyword)
task_new	task.c	/^Task* task_new(){$/;"	f
task_parse	task.c	/^void task_parse(Task* task, char* string){$/;"	f	signature:(Task* task, char* string)
task_set_string	task.c	/^void task_set_string(Task* t, char* string){$/;"	f	signature:(Task* t, char* string)
tasklist_append	tasklist.c	/^int tasklist_append(Tasklist* this, Task* t){$/;"	f	signature:(Tasklist* this, Task* t)
tasklist_display	tasklist.c	/^int tasklist_display(Tasklist* list){$/;"	f	signature:(Tasklist* list)
tasklist_dump	tasklist.c	/^int tasklist_dump(Tasklist *list, FILE* f){$/;"	f	signature:(Tasklist *list, FILE* f)
tasklist_free	tasklist.c	/^void tasklist_free(Tasklist* list){$/;"	f	signature:(Tasklist* list)
tasklist_get	tasklist.c	/^Task* tasklist_get(Tasklist* list, int index){$/;"	f	signature:(Tasklist* list, int index)
tasklist_new	tasklist.c	/^Tasklist* tasklist_new(){$/;"	f
tasklist_read	tasklist.c	/^int tasklist_read(Tasklist *list, FILE* f){$/;"	f	signature:(Tasklist *list, FILE* f)
tasklist_remove	tasklist.c	/^Task* tasklist_remove(Tasklist* list, int index){$/;"	f	signature:(Tasklist* list, int index)
tasklist_search	tasklist.c	/^Tasklist* tasklist_search(Tasklist* list, char* filter){$/;"	f	signature:(Tasklist* list, char* filter)
